  template <int dim> void Mesh<dim>::update()
  {
    // Distribute degrees of freedom
    dof_handler.distribute_dofs(fe);  
    
    // Precalculate and store weights and positions at quadrature points
    // for rapid integration and evaluation
    typename DoFHandler<dim>::active_cell_iterator
      cell = dof_handler.begin_active(),
      endc = dof_handler.end();

    n_q_pts   = quadrature_formula.size();
    n_dof     = fe.dofs_per_cell;
    n_weights = triangulation.n_cells() * n_dof;

    if(functionality & INNER_PRODUCTS){
      weights.resize(n_weights);
      typename DOFValues::iterator weight = weights.coefficients.begin();

      for (; cell!=endc; ++cell){
	fe_values.reinit (cell);
	for (size_t i=0; i<n_dof; ++i,++weight){
	  double w = 0;
	  // Weight of DOF \phi_{cell,i} is 
	  // \f$\int_{\Omega_{cell}} \phi_{cell,i}(x) dx = \sum_{q=1}^{N_q} \phi_{cell,i}(x_q) JxW_cell(x_q)\f$.
	  for(size_t q=0;q<n_q_pts;++q) w += fe_values.shape_value(i,q) * fe_values.JxW(q);
	  (*weight) = w;
	}
      }
    }

    sparsity_pattern.reinit (dof_handler.n_dofs(),
			     dof_handler.n_dofs(),
			     dof_handler.max_couplings_between_dofs());
    DoFTools::make_sparsity_pattern (dof_handler, sparsity_pattern);
    sparsity_pattern.compress();
    
    overlap_matrix.reinit(sparsity_pattern);
    laplace_matrix.reinit(sparsity_pattern);
    // Create overlap matrix ("mass matrix") \f$m_{ij} = \int_\Omega \phi_i(x) \phi_j(x) dx\f$ 
    // and Laplacian matrix  \f$m_{ij} = \int_\Omega \nabla\phi_i(x)\cdot \nabla\phi_j(x) dx\f$
    MatrixCreator::create_mass_matrix(dof_handler,quadrature_formula,overlap_matrix);
    MatrixCreator::create_laplace_matrix(dof_handler,quadrature_formula,laplace_matrix);

    constraints.close(); 

    printf("n_dofs  = %d\n"
	   "n_cells = %d\n"
	   "dofs_per_cell = %d\n",
	   dof_handler.n_dofs(),
	   triangulation.n_cells(),
	   fe.dofs_per_cell);

  }
